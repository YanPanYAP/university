#pragma once
// Защита от повторного включения заголовочного файла

namespace FST {
    struct RELATION { // Структура, представляющая ребро: символ и вершина, куда происходит переход.
        char symbol;  // Символ, который вызывает переход по этому ребру.
        short nnode;  // Номер вершины, в которую ведет переход по этому ребру.
        RELATION(
            char c = 0x00, // Конструктор: символ по умолчанию равен 0.
            short ns = 0   // Номер нового состояния по умолчанию равен 0.
        );
    };

    struct NODE { // Структура, представляющая вершину в графе переходов КА.
        short n_relation;   // Количество инцидентных ребер (связей) этой вершины.
        RELATION* relations; // Указатель на массив инцидентных ребер (связей) этой вершины.
        NODE(); // Конструктор по умолчанию.
        NODE(
            short n, // Количество инцидентных ребер.
            RELATION rel, ... // Переменное количество параметров: список ребер.
        );
    };

    struct FST { // Структура, представляющая недетерминированный конечный автомат (НКА).
        char* string;    // Входная строка, которую нужно разобрать.
        short position;  // Текущая позиция в разборе строки.
        short nstates;   // Количество состояний (вершин) в графе.
        NODE* nodes;     // Указатель на массив вершин (состояний) графа.
        short* rstates;  // Массив возможных текущих состояний (вершин), в которых может находиться автомат.
        FST(
            char* s,     // Входная строка.
            short ns,    // Количество состояний в графе.
            NODE n, ...  // Переменное количество параметров: список вершин (состояний) графа.
        );
    };

    // Функция, выполняющая разбор строки с помощью НКА и возвращающая true, если цепочка распознана.
    bool execute(FST& fst);
};
