; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33130.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6628E330_concurrencysal@h DB 01H
__DD735C24_sal@h DB 01H
__95D07812_vadefs@h DB 01H
__2C966F75_vcruntime@h DB 01H
__C84B2A68_xkeycheck@h DB 01H
__E4981F91_yvals_core@h DB 01H
__FFDAFD70___msvc_sanitizer_annotate_container@hpp DB 01H
__1B0272D9_corecrt@h DB 01H
__50BF2FAA_vcruntime_new@h DB 01H
__973DD6D2_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__EA84BEDA_crtdefs@h DB 01H
__7A2C09FE_use_ansi@h DB 01H
__B806B4B7_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__099E6B1A_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__21B98AC3_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__42D4AAE8_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__9315BD49_cwchar DB 01H
__81223BB7_xtr1common DB 01H
__D0D5387F_iosfwd DB 01H
__EDDD1674_stdint@h DB 01H
__B318E375_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__53AB384B_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__0E460208_cstdlib DB 01H
__B9985323_float@h DB 01H
__7ADAA09D_cfloat DB 01H
__8AA920FA_climits DB 01H
__2FEC17FD_intrin0@inl@h DB 01H
__F3A907D1_intrin0@h DB 01H
__1C3CEDF9_limits DB 01H
__AB8DD8A5_cstddef DB 01H
__86E2ECA3_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__597317E9_eh@h DB 01H
__9FD3D380_vcruntime_exception@h DB 01H
__22DBD04C_exception DB 01H
__6B6686E8_new DB 01H
__28D75C9A_xatomic@h DB 01H
__7CEE9503_initializer_list DB 01H
__394B8783_utility DB 01H
__6CD66C6A___msvc_iter_core@hpp DB 01H
__81056E89_xutility DB 01H
__53DEE440_xmemory DB 01H
__270D62DC_xstring DB 01H
__1EC467ED_ctype@h DB 01H
__06558CBD_cctype DB 01H
__D44167EB_string DB 01H
__BFC95293_cmath DB 01H
__90A9D9C9_iterator DB 01H
__F7972D0B_share@h DB 01H
__C9486F03___msvc_system_error_abi@hpp DB 01H
__94BF1FE1_cerrno DB 01H
__AB95EA11_stdexcept DB 01H
__A700C1C1_xcall_once@h DB 01H
__1093A1B8_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__797ACE9B_ctime DB 01H
__37C18DC8_xtimec@h DB 01H
__1B623E4D_xthreads@h DB 01H
__7709B13B_atomic DB 01H
__185DD3E1_system_error DB 01H
__78388AF5_vcruntime_typeinfo@h DB 01H
__F1DA9D90_typeinfo DB 01H
__A092E177_memory DB 01H
__8CD7B678_xfacet DB 01H
__8B91FF0A___msvc_xlocinfo_types@hpp DB 01H
__791C33B7_locale@h DB 01H
__9DEADED9_clocale DB 01H
__EE537E58_xlocinfo DB 01H
__F83316ED_xlocale DB 01H
__D7B6094B_xiosbase DB 01H
__A93552AD_streambuf DB 01H
__66B470FA_xlocnum DB 01H
__93ABBCFE_ios DB 01H
__EB23CC29_ostream DB 01H
__88F3F913_istream DB 01H
__E37C1496_iostream DB 01H
__BD6F46B1_stdafx@h DB 01H
__A999CA8C_getDaysToBirthday@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?getDaysToBirthday@@YAHHHH@Z			; getDaysToBirthday
PUBLIC	__JustMyCode_Default
EXTRN	abs:PROC
EXTRN	?isLeapYear@@YA_NH@Z:PROC			; isLeapYear
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getDaysToBirthday@@YAHHHH@Z DD imagerel $LN21
	DD	imagerel $LN21+676
	DD	imagerel $unwind$?getDaysToBirthday@@YAHHHH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getDaysToBirthday@@YAHHHH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f003dH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDaysToBirthday.cpp
;	COMDAT ?getDaysToBirthday@@YAHHHH@Z
_TEXT	SEGMENT
birthdayDate$ = 4
birthdayMonth$ = 36
a$ = 68
b$ = 100
c$ = 132
d$ = 164
e$1 = 196
e$2 = 228
tv70 = 436
day$ = 480
month$ = 488
year$ = 496
?getDaysToBirthday@@YAHHHH@Z PROC			; getDaysToBirthday, COMDAT

; 3    : int getDaysToBirthday(int day, int month, int year) {

$LN21:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A999CA8C_getDaysToBirthday@cpp
  00022	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4    : 	int birthdayDate = 16;

  00027	c7 45 04 10 00
	00 00		 mov	 DWORD PTR birthdayDate$[rbp], 16

; 5    : 	int birthdayMonth = 2;

  0002e	c7 45 24 02 00
	00 00		 mov	 DWORD PTR birthdayMonth$[rbp], 2

; 6    : 	int a = 28, b = 30, c = 31;

  00035	c7 45 44 1c 00
	00 00		 mov	 DWORD PTR a$[rbp], 28
  0003c	c7 45 64 1e 00
	00 00		 mov	 DWORD PTR b$[rbp], 30
  00043	c7 85 84 00 00
	00 1f 00 00 00	 mov	 DWORD PTR c$[rbp], 31

; 7    : 	
; 8    : 	if (isLeapYear(year)) {

  0004d	8b 8d f0 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  00053	e8 00 00 00 00	 call	 ?isLeapYear@@YA_NH@Z	; isLeapYear
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	74 08		 je	 SHORT $LN4@getDaysToB

; 9    : 		a++;

  0005f	8b 45 44	 mov	 eax, DWORD PTR a$[rbp]
  00062	ff c0		 inc	 eax
  00064	89 45 44	 mov	 DWORD PTR a$[rbp], eax
$LN4@getDaysToB:

; 10   : 	}
; 11   : 
; 12   : 	int d = a - birthdayDate;

  00067	8b 45 04	 mov	 eax, DWORD PTR birthdayDate$[rbp]
  0006a	8b 4d 44	 mov	 ecx, DWORD PTR a$[rbp]
  0006d	2b c8		 sub	 ecx, eax
  0006f	8b c1		 mov	 eax, ecx
  00071	89 85 a4 00 00
	00		 mov	 DWORD PTR d$[rbp], eax

; 13   : 
; 14   : 	switch (month) {

  00077	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  0007d	89 85 b4 01 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00083	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  00089	ff c8		 dec	 eax
  0008b	89 85 b4 01 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00091	83 bd b4 01 00
	00 0b		 cmp	 DWORD PTR tv70[rbp], 11
  00098	0f 87 ca 01 00
	00		 ja	 $LN2@getDaysToB
  0009e	48 63 85 b4 01
	00 00		 movsxd	 rax, DWORD PTR tv70[rbp]
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000ac	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN20@getDaysToB[rcx+rax*4]
  000b3	48 03 c1	 add	 rax, rcx
  000b6	ff e0		 jmp	 rax
$LN5@getDaysToB:

; 15   : 	case 1: return (c - day + birthdayDate); break;

  000b8	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  000be	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR c$[rbp]
  000c4	2b c8		 sub	 ecx, eax
  000c6	8b c1		 mov	 eax, ecx
  000c8	03 45 04	 add	 eax, DWORD PTR birthdayDate$[rbp]
  000cb	e9 98 01 00 00	 jmp	 $LN1@getDaysToB
  000d0	e9 93 01 00 00	 jmp	 $LN2@getDaysToB
$LN6@getDaysToB:

; 16   : 	case 2: return (abs(birthdayDate-day)); break;

  000d5	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  000db	8b 4d 04	 mov	 ecx, DWORD PTR birthdayDate$[rbp]
  000de	2b c8		 sub	 ecx, eax
  000e0	8b c1		 mov	 eax, ecx
  000e2	8b c8		 mov	 ecx, eax
  000e4	e8 00 00 00 00	 call	 abs
  000e9	e9 7a 01 00 00	 jmp	 $LN1@getDaysToB
  000ee	e9 75 01 00 00	 jmp	 $LN2@getDaysToB
$LN7@getDaysToB:

; 17   : 	case 3: return (d + day); break;

  000f3	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  000f9	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR d$[rbp]
  000ff	03 c8		 add	 ecx, eax
  00101	8b c1		 mov	 eax, ecx
  00103	e9 60 01 00 00	 jmp	 $LN1@getDaysToB
  00108	e9 5b 01 00 00	 jmp	 $LN2@getDaysToB
$LN8@getDaysToB:

; 18   : 	case 4: return (d + c + day); break;

  0010d	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR c$[rbp]
  00113	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR d$[rbp]
  00119	03 c8		 add	 ecx, eax
  0011b	8b c1		 mov	 eax, ecx
  0011d	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00123	e9 40 01 00 00	 jmp	 $LN1@getDaysToB
  00128	e9 3b 01 00 00	 jmp	 $LN2@getDaysToB
$LN9@getDaysToB:

; 19   : 	case 5: return (d + c + b + day); break;

  0012d	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR c$[rbp]
  00133	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR d$[rbp]
  00139	03 c8		 add	 ecx, eax
  0013b	8b c1		 mov	 eax, ecx
  0013d	03 45 64	 add	 eax, DWORD PTR b$[rbp]
  00140	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00146	e9 1d 01 00 00	 jmp	 $LN1@getDaysToB
  0014b	e9 18 01 00 00	 jmp	 $LN2@getDaysToB
$LN10@getDaysToB:

; 20   : 	case 6: return (d + 2 * c + b + day); break;

  00150	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR d$[rbp]
  00156	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR c$[rbp]
  0015c	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0015f	03 45 64	 add	 eax, DWORD PTR b$[rbp]
  00162	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00168	e9 fb 00 00 00	 jmp	 $LN1@getDaysToB
  0016d	e9 f6 00 00 00	 jmp	 $LN2@getDaysToB
$LN11@getDaysToB:

; 21   : 	case 7: return (d + 2 * c + 2 * b + day); break;

  00172	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR d$[rbp]
  00178	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR c$[rbp]
  0017e	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00181	8b 8d e0 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  00187	03 c8		 add	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	8b 4d 64	 mov	 ecx, DWORD PTR b$[rbp]
  0018e	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00191	e9 d2 00 00 00	 jmp	 $LN1@getDaysToB
  00196	e9 cd 00 00 00	 jmp	 $LN2@getDaysToB
$LN12@getDaysToB:

; 22   : 	case 8: 
; 23   : 		if (day <= 16) {

  0019b	83 bd e0 01 00
	00 10		 cmp	 DWORD PTR day$[rbp], 16
  001a2	7f 29		 jg	 SHORT $LN13@getDaysToB

; 24   : 			int e = d + 3 * c + 2 * b + day;

  001a4	6b 85 84 00 00
	00 03		 imul	 eax, DWORD PTR c$[rbp], 3
  001ab	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR d$[rbp]
  001b1	03 c8		 add	 ecx, eax
  001b3	8b c1		 mov	 eax, ecx
  001b5	8b 8d e0 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  001bb	03 c8		 add	 ecx, eax
  001bd	8b c1		 mov	 eax, ecx
  001bf	8b 4d 64	 mov	 ecx, DWORD PTR b$[rbp]
  001c2	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  001c5	89 85 c4 00 00
	00		 mov	 DWORD PTR e$1[rbp], eax

; 25   : 		}

  001cb	eb 27		 jmp	 SHORT $LN14@getDaysToB
$LN13@getDaysToB:

; 26   : 		else {
; 27   : 			int e = birthdayDate + 3 * c + 2* b + day - b;

  001cd	6b 85 84 00 00
	00 03		 imul	 eax, DWORD PTR c$[rbp], 3
  001d4	8b 4d 04	 mov	 ecx, DWORD PTR birthdayDate$[rbp]
  001d7	03 c8		 add	 ecx, eax
  001d9	8b c1		 mov	 eax, ecx
  001db	8b 8d e0 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  001e1	03 c8		 add	 ecx, eax
  001e3	8b c1		 mov	 eax, ecx
  001e5	8b 4d 64	 mov	 ecx, DWORD PTR b$[rbp]
  001e8	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  001eb	2b 45 64	 sub	 eax, DWORD PTR b$[rbp]
  001ee	89 85 e4 00 00
	00		 mov	 DWORD PTR e$2[rbp], eax
$LN14@getDaysToB:

; 28   : 		} break;

  001f4	eb 72		 jmp	 SHORT $LN2@getDaysToB
$LN15@getDaysToB:

; 29   : 	case 9: return (birthdayDate + 3 * c + b + day - b); break;

  001f6	6b 85 84 00 00
	00 03		 imul	 eax, DWORD PTR c$[rbp], 3
  001fd	8b 4d 04	 mov	 ecx, DWORD PTR birthdayDate$[rbp]
  00200	03 c8		 add	 ecx, eax
  00202	8b c1		 mov	 eax, ecx
  00204	03 45 64	 add	 eax, DWORD PTR b$[rbp]
  00207	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  0020d	2b 45 64	 sub	 eax, DWORD PTR b$[rbp]
  00210	eb 56		 jmp	 SHORT $LN1@getDaysToB
  00212	eb 54		 jmp	 SHORT $LN2@getDaysToB
$LN16@getDaysToB:

; 30   : 	case 10: return (birthdayDate + 2 * c + b + day - c); break;

  00214	8b 45 04	 mov	 eax, DWORD PTR birthdayDate$[rbp]
  00217	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR c$[rbp]
  0021d	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00220	03 45 64	 add	 eax, DWORD PTR b$[rbp]
  00223	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00229	2b 85 84 00 00
	00		 sub	 eax, DWORD PTR c$[rbp]
  0022f	eb 37		 jmp	 SHORT $LN1@getDaysToB
  00231	eb 35		 jmp	 SHORT $LN2@getDaysToB
$LN17@getDaysToB:

; 31   : 	case 11: return (birthdayDate + 2 * c + b + day - b); break;

  00233	8b 45 04	 mov	 eax, DWORD PTR birthdayDate$[rbp]
  00236	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR c$[rbp]
  0023c	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0023f	03 45 64	 add	 eax, DWORD PTR b$[rbp]
  00242	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00248	2b 45 64	 sub	 eax, DWORD PTR b$[rbp]
  0024b	eb 1b		 jmp	 SHORT $LN1@getDaysToB
  0024d	eb 19		 jmp	 SHORT $LN2@getDaysToB
$LN18@getDaysToB:

; 32   : 	case 12: return (birthdayDate + c + day - c); break;

  0024f	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR c$[rbp]
  00255	8b 4d 04	 mov	 ecx, DWORD PTR birthdayDate$[rbp]
  00258	03 c8		 add	 ecx, eax
  0025a	8b c1		 mov	 eax, ecx
  0025c	03 85 e0 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00262	2b 85 84 00 00
	00		 sub	 eax, DWORD PTR c$[rbp]
$LN2@getDaysToB:
$LN1@getDaysToB:

; 33   : 	}
; 34   : }

  00268	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  0026f	5f		 pop	 rdi
  00270	5d		 pop	 rbp
  00271	c3		 ret	 0
  00272	66 90		 npad	 2
$LN20@getDaysToB:
  00274	00 00 00 00	 DD	 $LN5@getDaysToB
  00278	00 00 00 00	 DD	 $LN6@getDaysToB
  0027c	00 00 00 00	 DD	 $LN7@getDaysToB
  00280	00 00 00 00	 DD	 $LN8@getDaysToB
  00284	00 00 00 00	 DD	 $LN9@getDaysToB
  00288	00 00 00 00	 DD	 $LN10@getDaysToB
  0028c	00 00 00 00	 DD	 $LN11@getDaysToB
  00290	00 00 00 00	 DD	 $LN12@getDaysToB
  00294	00 00 00 00	 DD	 $LN15@getDaysToB
  00298	00 00 00 00	 DD	 $LN16@getDaysToB
  0029c	00 00 00 00	 DD	 $LN17@getDaysToB
  002a0	00 00 00 00	 DD	 $LN18@getDaysToB
?getDaysToBirthday@@YAHHHH@Z ENDP			; getDaysToBirthday
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDaysToBirthday.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A999CA8C_getDaysToBirthday@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDaysToBirthday.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A999CA8C_getDaysToBirthday@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
