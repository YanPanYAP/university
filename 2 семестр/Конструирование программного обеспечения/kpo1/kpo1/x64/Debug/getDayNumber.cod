; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33130.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6628E330_concurrencysal@h DB 01H
__DD735C24_sal@h DB 01H
__95D07812_vadefs@h DB 01H
__2C966F75_vcruntime@h DB 01H
__C84B2A68_xkeycheck@h DB 01H
__E4981F91_yvals_core@h DB 01H
__FFDAFD70___msvc_sanitizer_annotate_container@hpp DB 01H
__1B0272D9_corecrt@h DB 01H
__50BF2FAA_vcruntime_new@h DB 01H
__973DD6D2_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__EA84BEDA_crtdefs@h DB 01H
__7A2C09FE_use_ansi@h DB 01H
__B806B4B7_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__099E6B1A_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__21B98AC3_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__42D4AAE8_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__9315BD49_cwchar DB 01H
__81223BB7_xtr1common DB 01H
__D0D5387F_iosfwd DB 01H
__EDDD1674_stdint@h DB 01H
__B318E375_cstdint DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__53AB384B_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__0E460208_cstdlib DB 01H
__B9985323_float@h DB 01H
__7ADAA09D_cfloat DB 01H
__8AA920FA_climits DB 01H
__2FEC17FD_intrin0@inl@h DB 01H
__F3A907D1_intrin0@h DB 01H
__1C3CEDF9_limits DB 01H
__AB8DD8A5_cstddef DB 01H
__86E2ECA3_type_traits DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__597317E9_eh@h DB 01H
__9FD3D380_vcruntime_exception@h DB 01H
__22DBD04C_exception DB 01H
__6B6686E8_new DB 01H
__28D75C9A_xatomic@h DB 01H
__7CEE9503_initializer_list DB 01H
__394B8783_utility DB 01H
__6CD66C6A___msvc_iter_core@hpp DB 01H
__81056E89_xutility DB 01H
__53DEE440_xmemory DB 01H
__270D62DC_xstring DB 01H
__1EC467ED_ctype@h DB 01H
__06558CBD_cctype DB 01H
__D44167EB_string DB 01H
__BFC95293_cmath DB 01H
__90A9D9C9_iterator DB 01H
__F7972D0B_share@h DB 01H
__C9486F03___msvc_system_error_abi@hpp DB 01H
__94BF1FE1_cerrno DB 01H
__AB95EA11_stdexcept DB 01H
__A700C1C1_xcall_once@h DB 01H
__1093A1B8_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__797ACE9B_ctime DB 01H
__37C18DC8_xtimec@h DB 01H
__1B623E4D_xthreads@h DB 01H
__7709B13B_atomic DB 01H
__185DD3E1_system_error DB 01H
__78388AF5_vcruntime_typeinfo@h DB 01H
__F1DA9D90_typeinfo DB 01H
__A092E177_memory DB 01H
__8CD7B678_xfacet DB 01H
__8B91FF0A___msvc_xlocinfo_types@hpp DB 01H
__791C33B7_locale@h DB 01H
__9DEADED9_clocale DB 01H
__EE537E58_xlocinfo DB 01H
__F83316ED_xlocale DB 01H
__D7B6094B_xiosbase DB 01H
__A93552AD_streambuf DB 01H
__66B470FA_xlocnum DB 01H
__93ABBCFE_ios DB 01H
__EB23CC29_ostream DB 01H
__88F3F913_istream DB 01H
__E37C1496_iostream DB 01H
__BD6F46B1_stdafx@h DB 01H
__EBCAE223_getDayNumber@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?getDayNumber@@YAHHHH@Z				; getDayNumber
PUBLIC	__JustMyCode_Default
EXTRN	?isLeapYear@@YA_NH@Z:PROC			; isLeapYear
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getDayNumber@@YAHHHH@Z DD imagerel $LN19
	DD	imagerel $LN19+524
	DD	imagerel $unwind$?getDayNumber@@YAHHHH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getDayNumber@@YAHHHH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f0029H
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDayNumber.cpp
;	COMDAT ?getDayNumber@@YAHHHH@Z
_TEXT	SEGMENT
a$ = 4
b$ = 36
c$ = 68
tv69 = 276
day$ = 320
month$ = 328
year$ = 336
?getDayNumber@@YAHHHH@Z PROC				; getDayNumber, COMDAT

; 3    : int getDayNumber(int day, int month, int year) {

$LN19:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EBCAE223_getDayNumber@cpp
  00022	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4    : 	int a = 28, b = 30, c = 31;

  00027	c7 45 04 1c 00
	00 00		 mov	 DWORD PTR a$[rbp], 28
  0002e	c7 45 24 1e 00
	00 00		 mov	 DWORD PTR b$[rbp], 30
  00035	c7 45 44 1f 00
	00 00		 mov	 DWORD PTR c$[rbp], 31

; 5    : 
; 6    : 	if (isLeapYear(year)) {

  0003c	8b 8d 50 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  00042	e8 00 00 00 00	 call	 ?isLeapYear@@YA_NH@Z	; isLeapYear
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	74 08		 je	 SHORT $LN4@getDayNumb

; 7    : 		a++;

  0004e	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  00051	ff c0		 inc	 eax
  00053	89 45 04	 mov	 DWORD PTR a$[rbp], eax
$LN4@getDayNumb:

; 8    : 	}
; 9    : 
; 10   : 	switch (month) {

  00056	8b 85 48 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  0005c	89 85 14 01 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00062	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR tv69[rbp]
  00068	ff c8		 dec	 eax
  0006a	89 85 14 01 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00070	83 bd 14 01 00
	00 0b		 cmp	 DWORD PTR tv69[rbp], 11
  00077	0f 87 54 01 00
	00		 ja	 $LN2@getDayNumb
  0007d	48 63 85 14 01
	00 00		 movsxd	 rax, DWORD PTR tv69[rbp]
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0008b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN18@getDayNumb[rcx+rax*4]
  00092	48 03 c1	 add	 rax, rcx
  00095	ff e0		 jmp	 rax
$LN5@getDayNumb:

; 11   : 	case 1: return (day); break;

  00097	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  0009d	e9 2f 01 00 00	 jmp	 $LN1@getDayNumb
  000a2	e9 2a 01 00 00	 jmp	 $LN2@getDayNumb
$LN6@getDayNumb:

; 12   : 	case 2: return (c + day); break;

  000a7	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR day$[rbp]
  000ad	8b 4d 44	 mov	 ecx, DWORD PTR c$[rbp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	e9 18 01 00 00	 jmp	 $LN1@getDayNumb
  000b9	e9 13 01 00 00	 jmp	 $LN2@getDayNumb
$LN7@getDayNumb:

; 13   : 	case 3: return (c + a + day); break;

  000be	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  000c1	8b 4d 44	 mov	 ecx, DWORD PTR c$[rbp]
  000c4	03 c8		 add	 ecx, eax
  000c6	8b c1		 mov	 eax, ecx
  000c8	03 85 40 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  000ce	e9 fe 00 00 00	 jmp	 $LN1@getDayNumb
  000d3	e9 f9 00 00 00	 jmp	 $LN2@getDayNumb
$LN8@getDayNumb:

; 14   : 	case 4: return (2 * c + a + day); break;

  000d8	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  000db	8b 4d 44	 mov	 ecx, DWORD PTR c$[rbp]
  000de	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  000e1	03 85 40 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  000e7	e9 e5 00 00 00	 jmp	 $LN1@getDayNumb
  000ec	e9 e0 00 00 00	 jmp	 $LN2@getDayNumb
$LN9@getDayNumb:

; 15   : 	case 5: return (2 * c + a + b + day); break;

  000f1	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  000f4	8b 4d 44	 mov	 ecx, DWORD PTR c$[rbp]
  000f7	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  000fa	03 45 24	 add	 eax, DWORD PTR b$[rbp]
  000fd	03 85 40 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  00103	e9 c9 00 00 00	 jmp	 $LN1@getDayNumb
  00108	e9 c4 00 00 00	 jmp	 $LN2@getDayNumb
$LN10@getDayNumb:

; 16   : 	case 6: return (3 * c + a + b + day); break;

  0010d	6b 45 44 03	 imul	 eax, DWORD PTR c$[rbp], 3
  00111	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  00114	03 45 24	 add	 eax, DWORD PTR b$[rbp]
  00117	03 85 40 01 00
	00		 add	 eax, DWORD PTR day$[rbp]
  0011d	e9 af 00 00 00	 jmp	 $LN1@getDayNumb
  00122	e9 aa 00 00 00	 jmp	 $LN2@getDayNumb
$LN11@getDayNumb:

; 17   : 	case 7: return (3 * c + a + 2 * b + day); break;

  00127	6b 45 44 03	 imul	 eax, DWORD PTR c$[rbp], 3
  0012b	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  0012e	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  00134	03 c8		 add	 ecx, eax
  00136	8b c1		 mov	 eax, ecx
  00138	8b 4d 24	 mov	 ecx, DWORD PTR b$[rbp]
  0013b	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0013e	e9 8e 00 00 00	 jmp	 $LN1@getDayNumb
  00143	e9 89 00 00 00	 jmp	 $LN2@getDayNumb
$LN12@getDayNumb:

; 18   : 	case 8: return (4 * c + a + 2 * b + day); break;

  00148	8b 45 04	 mov	 eax, DWORD PTR a$[rbp]
  0014b	8b 4d 44	 mov	 ecx, DWORD PTR c$[rbp]
  0014e	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  00151	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  00157	03 c8		 add	 ecx, eax
  00159	8b c1		 mov	 eax, ecx
  0015b	8b 4d 24	 mov	 ecx, DWORD PTR b$[rbp]
  0015e	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00161	eb 6e		 jmp	 SHORT $LN1@getDayNumb
  00163	eb 6c		 jmp	 SHORT $LN2@getDayNumb
$LN13@getDayNumb:

; 19   : 	case 9: return (5 * c + a + 2 * b + day); break;

  00165	6b 45 44 05	 imul	 eax, DWORD PTR c$[rbp], 5
  00169	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  0016c	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  00172	03 c8		 add	 ecx, eax
  00174	8b c1		 mov	 eax, ecx
  00176	8b 4d 24	 mov	 ecx, DWORD PTR b$[rbp]
  00179	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0017c	eb 53		 jmp	 SHORT $LN1@getDayNumb
  0017e	eb 51		 jmp	 SHORT $LN2@getDayNumb
$LN14@getDayNumb:

; 20   : 	case 10: return (5 * c + a + 3 * b + day); break;

  00180	6b 45 44 05	 imul	 eax, DWORD PTR c$[rbp], 5
  00184	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  00187	6b 4d 24 03	 imul	 ecx, DWORD PTR b$[rbp], 3
  0018b	8b 95 40 01 00
	00		 mov	 edx, DWORD PTR day$[rbp]
  00191	03 d0		 add	 edx, eax
  00193	8b c2		 mov	 eax, edx
  00195	03 c8		 add	 ecx, eax
  00197	8b c1		 mov	 eax, ecx
  00199	eb 36		 jmp	 SHORT $LN1@getDayNumb
  0019b	eb 34		 jmp	 SHORT $LN2@getDayNumb
$LN15@getDayNumb:

; 21   : 	case 11: return (6 * c + a + 3 * b + day); break;

  0019d	6b 45 44 06	 imul	 eax, DWORD PTR c$[rbp], 6
  001a1	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  001a4	6b 4d 24 03	 imul	 ecx, DWORD PTR b$[rbp], 3
  001a8	8b 95 40 01 00
	00		 mov	 edx, DWORD PTR day$[rbp]
  001ae	03 d0		 add	 edx, eax
  001b0	8b c2		 mov	 eax, edx
  001b2	03 c8		 add	 ecx, eax
  001b4	8b c1		 mov	 eax, ecx
  001b6	eb 19		 jmp	 SHORT $LN1@getDayNumb
  001b8	eb 17		 jmp	 SHORT $LN2@getDayNumb
$LN16@getDayNumb:

; 22   : 	case 12: return (6 * c + a + 4 * b + day); break;

  001ba	6b 45 44 06	 imul	 eax, DWORD PTR c$[rbp], 6
  001be	03 45 04	 add	 eax, DWORD PTR a$[rbp]
  001c1	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  001c7	03 c8		 add	 ecx, eax
  001c9	8b c1		 mov	 eax, ecx
  001cb	8b 4d 24	 mov	 ecx, DWORD PTR b$[rbp]
  001ce	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
$LN2@getDayNumb:
$LN1@getDayNumb:

; 23   : 	}
; 24   : }

  001d1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001d8	5f		 pop	 rdi
  001d9	5d		 pop	 rbp
  001da	c3		 ret	 0
  001db	90		 npad	 1
$LN18@getDayNumb:
  001dc	00 00 00 00	 DD	 $LN5@getDayNumb
  001e0	00 00 00 00	 DD	 $LN6@getDayNumb
  001e4	00 00 00 00	 DD	 $LN7@getDayNumb
  001e8	00 00 00 00	 DD	 $LN8@getDayNumb
  001ec	00 00 00 00	 DD	 $LN9@getDayNumb
  001f0	00 00 00 00	 DD	 $LN10@getDayNumb
  001f4	00 00 00 00	 DD	 $LN11@getDayNumb
  001f8	00 00 00 00	 DD	 $LN12@getDayNumb
  001fc	00 00 00 00	 DD	 $LN13@getDayNumb
  00200	00 00 00 00	 DD	 $LN14@getDayNumb
  00204	00 00 00 00	 DD	 $LN15@getDayNumb
  00208	00 00 00 00	 DD	 $LN16@getDayNumb
?getDayNumber@@YAHHHH@Z ENDP				; getDayNumber
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDayNumber.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EBCAE223_getDayNumber@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File \\Mac\Home\Documents\fit\kpo\kpo1\kpo1\getDayNumber.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EBCAE223_getDayNumber@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
